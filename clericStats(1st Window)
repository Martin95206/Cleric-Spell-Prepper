import java.awt.EventQueue;

import javax.swing.JFrame;
import java.awt.GridBagLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;

public class clericStats {

	private JFrame frame;
	private String [] divineDomain = {"--", "Knowledge", "Life", "Light", "Nature", "Tempest", "Trickery", "War"};
	private JButton btnNext;
	private JComboBox comboBoxDomain;
	private final Action spells = new SwingAction_1();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					clericStats window = new clericStats();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public clericStats() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 446, 389);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//select your cleric domain as each domain will have unique spells already prepared for you
		comboBoxDomain = new JComboBox(divineDomain);
		comboBoxDomain.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (comboBoxDomain.getSelectedItem() != "--") {
					btnNext.setEnabled(true);
				}
				else {
					btnNext.setEnabled(false);
				}
			}
		});
		
		
		//drop down menu to select your domain
		JLabel lblDivineDomain = new JLabel("Divine Domain");
		
		//button brings you to the page associated with your domain
		btnNext = new JButton("Next ->");
		btnNext.setAction(spells);
		btnNext.setEnabled(false);
		
		
		//code generated by swing framework
		GroupLayout groupLayout = new GroupLayout(frame.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout.createSequentialGroup()
					.addContainerGap(619, Short.MAX_VALUE)
					.addComponent(btnNext)
					.addGap(12))
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(26)
					.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING)
						.addComponent(comboBoxDomain, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblDivineDomain))
					.addContainerGap(603, Short.MAX_VALUE))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.TRAILING)
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(36)
					.addComponent(lblDivineDomain)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(comboBoxDomain, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
					.addComponent(btnNext)
					.addContainerGap())
		);
		frame.getContentPane().setLayout(groupLayout);
	}
	
	public static boolean isParsable(String input){
	    boolean parsable = true;
	    try{
	        Integer.parseInt(input);
	    }catch(NumberFormatException e){
	        parsable = false;
	    }
	    return parsable;
	}

	
	
	//action that registers which domain was selected and which page to open when clicked
	private class SwingAction_1 extends AbstractAction {
		public SwingAction_1() {
			putValue(NAME, "Spells ->");
			putValue(SHORT_DESCRIPTION, "Go to spell selection");
		}
		public void actionPerformed(ActionEvent e) {
			String domain = (String) comboBoxDomain.getSelectedItem();
			
			switch (domain) {
			
			case "Knowledge":
				clericKnowledgeDomain.main(null);
				frame.dispose();
				break;
				
			case "Life": 
				clericLifeDomain.main(null);
				frame.dispose();
				break;
				
			case "Light":
				clericLightDomain.main(null);
				frame.dispose();
				break;
				
			case "Nature":
				clericNatureDomain.main(null);
				frame.dispose();
				break;
				
			case "Tempest":
				clericTempestDomain.main(null);
				frame.dispose();
				break;
				
			case "Trickery":
				clericTrickeryDomain.main(null);
				frame.dispose();
				break;
				
			case "War":
				clericWarDomain.main(null);
				frame.dispose();
				break;
				
			}
		}
	}
}
